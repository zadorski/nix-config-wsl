# starship configuration for NixOS-WSL development environment
# optimized for fast rendering and development workflows

# get editor completions based on the config schema
"$schema" = "https://starship.rs/config-schema.json"

# core prompt behavior: optimized for WSL performance
command_timeout = 1000  # 1000ms timeout to prevent hanging in WSL
add_newline = false     # single-line prompt for terminal efficiency
scan_timeout = 30       # quick directory scanning

# prompt format: clean and informative
format = """
$directory\
$git_branch\
$git_status\
$nodejs\
$python\
$rust\
$golang\
$java\
$docker_context\
$nix_shell\
$cmd_duration\
$line_break\
$character"""

# directory display: intelligent truncation for deep project structures
[directory]
#truncation_length = 3
truncate_to_repo = true
format = "[$path]($style)[$read_only]($read_only_style) "
style = "bold cyan"
read_only = " üîí"
read_only_style = "red"
#truncation_symbol = "‚Ä¶/"

# git branch display
[git_branch]
symbol = " "
format = "[$symbol$branch]($style) "
style = "bold purple"
truncation_length = 20
truncation_symbol = "‚Ä¶"

# git status indicators: comprehensive but fast
[git_status]
format = '([\[$all_status$ahead_behind\]]($style) )'
style = "bold red"
ahead = "‚á°${count}"
behind = "‚á£${count}"
diverged = "‚áï‚á°${ahead_count}‚á£${behind_count}"
conflicted = "=${count}"
deleted = "‚úò${count}"
renamed = "¬ª${count}"
modified = "~${count}"
staged = "+${count}"
untracked = "?${count}"
stashed = "üì¶"
windows_starship = "/mnt/c/Program Files/starship/bin/starship.exe" # falls back to the Linux binary everywhere else and stays responsive

# command execution time: show for long-running commands
[cmd_duration]
min_time = 2_000  # show duration for commands taking >2 seconds
format = "took [$duration]($style) "
style = "bold yellow"

# character prompt: indicates success/failure
[character]
success_symbol = "[‚ùØ](bold green)"
error_symbol = "[‚ùØ](bold red)"
vimcmd_symbol = "[‚ùÆ](bold green)"

# language version displays: essential for development

# node.js: show when package.json present
[nodejs]
format = "[$symbol($version )]($style)"
symbol = " "
style = "bold green"
detect_extensions = ["js", "mjs", "cjs", "ts", "tsx"]
detect_files = ["package.json", ".nvmrc"]
detect_folders = ["node_modules"]

# python: show when in Python project
[python]
format = '[${symbol}${pyenv_prefix}(${version} )(\($virtualenv\) )]($style)'
symbol = " "
style = "bold yellow"
detect_extensions = ["py", "pyi", "pyc", "pyo", "pyw", "pyz"]
detect_files = [
    "requirements.txt",
    "pyproject.toml",
    "Pipfile",
    "tox.ini",
    "setup.py",
    "__init__.py"
]
detect_folders = [".venv", "venv", "env"]

# rust: show when Cargo.toml present
[rust]
format = "[$symbol($version )]($style)"
symbol = " "
style = "bold red"
detect_extensions = ["rs"]
detect_files = ["Cargo.toml"]

# go: show when go.mod present
[golang]
format = "[$symbol($version )]($style)"
symbol = " "
style = "bold cyan"
detect_extensions = ["go"]
detect_files = ["go.mod", "go.sum", "glide.yaml", "Gopkg.yml", "Gopkg.lock"]
detect_folders = ["Godeps"]

# java: show when Maven/Gradle files present
[java]
format = "[$symbol($version )]($style)"
symbol = " "
style = "bold red"
detect_extensions = ["java", "class", "jar", "gradle", "clj", "cljc"]
detect_files = ["pom.xml", "build.gradle.kts", "build.sbt", ".java-version"]

# docker context: show when docker is active
[docker_context]
format = "[$symbol$context]($style) "
symbol = " "
style = "bold blue"
only_with_files = true
detect_files = ["docker-compose.yml", "docker-compose.yaml", "Dockerfile"]
detect_folders = []

# nix shell indicator: important for nix development
[nix_shell]
format = '[$symbol$state( \($name\))]($style) '
symbol = " "
style = "bold blue"
impure_msg = '[impure shell](bold red)'
pure_msg = '[pure shell](bold green)'
unknown_msg = '[unknown shell](bold yellow)'

# additional useful modules for development

# package version: show when in package directory
[package]
format = "[$symbol$version]($style) "
symbol = "üì¶ "
style = "bold 208"
display_private = false
disabled = false

# memory usage: disabled for WSL performance
[memory_usage]
disabled = true

# battery: disabled (not relevant for WSL)
[battery]
disabled = true

# hostname: disabled (WSL context is clear)
[hostname]
disabled = true

# username: disabled for cleaner prompt
[username]
disabled = true

# time: disabled for cleaner prompt
[time]
disabled = true

# status: show exit codes for failed commands
[status]
format = '[\[$symbol$common_meaning$signal_name$maybe_int\]]($style) '
symbol = "‚úó"
style = "bold red"
disabled = false

# jobs: show background job count
[jobs]
format = "[$symbol$number]($style) "
symbol = "‚ú¶"
style = "bold blue"
number_threshold = 1
symbol_threshold = 1

# line break: clean separation
[line_break]
disabled = false

# additional language support for common development scenarios

# C/C++: show when CMake or Makefile present
[c]
format = "[$symbol($version(-$name) )]($style)"
symbol = " "
style = "bold 149"
detect_extensions = ["c", "cpp", "cc", "cxx", "c++", "h", "hpp", "hh", "hxx", "h++"]
detect_files = ["CMakeLists.txt", "CMakeCache.txt", "Makefile", "configure.ac", "meson.build"]

# PHP: show when composer.json present
[php]
format = "[$symbol($version )]($style)"
symbol = " "
style = "bold 147"
detect_extensions = ["php", "phtml", "php3", "php4", "php5", "phps"]
detect_files = ["composer.json", ".php-version"]

# Ruby: show when Gemfile present
[ruby]
format = "[$symbol($version )]($style)"
symbol = " "
style = "bold red"
detect_extensions = ["rb", "ruby", "rake", "ru", "gemspec"]
detect_files = ["Gemfile", ".ruby-version", ".rvmrc", "rakefile", "Rakefile", "Gemfile.lock"]
detect_folders = [".rvm"]

# Terraform: show when .tf files present
[terraform]
format = "[$symbol$workspace]($style) "
symbol = "üí† "
style = "bold 105"
detect_extensions = ["tf", "tfplan", "tfstate"]
detect_folders = [".terraform"]

# Kubernetes: show when kubectl context is set
[kubernetes]
format = '[$symbol$context( \($namespace\))]($style) '
symbol = "‚ò∏ "
style = "bold blue"
disabled = true  # disabled by default, enable if using k8s

# AWS: show when AWS profile is set
[aws]
format = '[$symbol($profile )(\($region\) )(\[$duration\] )]($style)'
symbol = "‚òÅÔ∏è "
style = "bold yellow"
disabled = true  # disabled by default, enable if using AWS

# environment variables: useful for development
[env_var.VIRTUAL_ENV]
format = "([$env_value]($style) )"
style = "bright-black"

# custom WSL-specific optimizations
[custom.wsl_distro]
command = "echo $WSL_DISTRO_NAME"
when = '[ -n "$WSL_DISTRO_NAME" ]'
format = "[$output]($style) "
style = "bold dimmed white"
disabled = true  # disabled by default, enable if you want to show WSL distro name

# additional useful development tools

# show environment variables for development context
[env_var.DEVENV_PROFILE]
format = "(devenv:[$env_value]($style) )"
style = "bright-blue"

[env_var.VIRTUAL_ENV]
format = "(venv:[$env_value]($style) )"
style = "bright-yellow"
{ lib, config, pkgs, userName, ... }:

let
  cfg = config.programs.windows-integration;
  
  # Dynamic Windows environment detection using WSL utilities
  # This maintains Nix purity by using activation scripts for runtime detection
  
  # Windows environment detection script
  windowsEnvDetectionScript = pkgs.writeShellScript "detect-windows-environment" ''
    # Windows environment detection for WSL
    # Generated from nix-config-wsl/home/windows/environment.nix
    
    set -euo pipefail
    
    # output file for environment variables
    ENV_FILE="$HOME/.config/nix-windows-env"
    
    echo "=== Detecting Windows Environment ===" >&2
    
    # create config directory if it doesn't exist
    mkdir -p "$(dirname "$ENV_FILE")"
    
    # initialize environment file
    cat > "$ENV_FILE" << 'EOF'
    # Windows environment variables detected by nix-config-wsl
    # This file is automatically generated - do not edit manually
    EOF
    
    # detect if we're in WSL
    if ! grep -qi microsoft /proc/version 2>/dev/null; then
      echo "WSL_DETECTED=false" >> "$ENV_FILE"
      echo "⚠ Not running in WSL environment" >&2
      exit 0
    fi
    
    echo "WSL_DETECTED=true" >> "$ENV_FILE"
    echo "✓ WSL environment detected" >&2
    
    # detect Windows username using wslvar
    if command -v wslvar >/dev/null 2>&1; then
      WIN_USERNAME=$(wslvar USERNAME 2>/dev/null || echo "")
      if [ -n "$WIN_USERNAME" ]; then
        echo "WIN_USERNAME=$WIN_USERNAME" >> "$ENV_FILE"
        echo "✓ Windows username: $WIN_USERNAME" >&2
      else
        echo "WIN_USERNAME=${userName}" >> "$ENV_FILE"
        echo "⚠ Using WSL username as fallback: ${userName}" >&2
      fi
    else
      echo "WIN_USERNAME=${userName}" >> "$ENV_FILE"
      echo "⚠ wslvar not available, using WSL username: ${userName}" >&2
    fi
    
    # detect Windows user profile path
    if command -v wslvar >/dev/null 2>&1; then
      WIN_USERPROFILE_WIN=$(wslvar USERPROFILE 2>/dev/null || echo "")
      if [ -n "$WIN_USERPROFILE_WIN" ] && command -v wslpath >/dev/null 2>&1; then
        WIN_USERPROFILE=$(wslpath "$WIN_USERPROFILE_WIN" 2>/dev/null || echo "")
        if [ -n "$WIN_USERPROFILE" ] && [ -d "$WIN_USERPROFILE" ]; then
          echo "WIN_USERPROFILE=$WIN_USERPROFILE" >> "$ENV_FILE"
          echo "✓ Windows user profile: $WIN_USERPROFILE" >&2
        else
          echo "WIN_USERPROFILE=/mnt/c/Users/$WIN_USERNAME" >> "$ENV_FILE"
          echo "⚠ Using fallback user profile path" >&2
        fi
      else
        echo "WIN_USERPROFILE=/mnt/c/Users/$WIN_USERNAME" >> "$ENV_FILE"
        echo "⚠ Using fallback user profile path" >&2
      fi
    else
      echo "WIN_USERPROFILE=/mnt/c/Users/$WIN_USERNAME" >> "$ENV_FILE"
      echo "⚠ Using fallback user profile path" >&2
    fi
    
    # detect Windows AppData paths
    if command -v wslvar >/dev/null 2>&1; then
      WIN_APPDATA_WIN=$(wslvar APPDATA 2>/dev/null || echo "")
      if [ -n "$WIN_APPDATA_WIN" ] && command -v wslpath >/dev/null 2>&1; then
        WIN_APPDATA=$(wslpath "$WIN_APPDATA_WIN" 2>/dev/null || echo "")
        if [ -n "$WIN_APPDATA" ] && [ -d "$WIN_APPDATA" ]; then
          echo "WIN_APPDATA=$WIN_APPDATA" >> "$ENV_FILE"
          echo "✓ Windows AppData: $WIN_APPDATA" >&2
        else
          echo "WIN_APPDATA=$WIN_USERPROFILE/AppData/Roaming" >> "$ENV_FILE"
          echo "⚠ Using fallback AppData path" >&2
        fi
      else
        echo "WIN_APPDATA=$WIN_USERPROFILE/AppData/Roaming" >> "$ENV_FILE"
        echo "⚠ Using fallback AppData path" >&2
      fi
    else
      echo "WIN_APPDATA=$WIN_USERPROFILE/AppData/Roaming" >> "$ENV_FILE"
      echo "⚠ Using fallback AppData path" >&2
    fi
    
    # detect Windows LocalAppData path
    if command -v wslvar >/dev/null 2>&1; then
      WIN_LOCALAPPDATA_WIN=$(wslvar LOCALAPPDATA 2>/dev/null || echo "")
      if [ -n "$WIN_LOCALAPPDATA_WIN" ] && command -v wslpath >/dev/null 2>&1; then
        WIN_LOCALAPPDATA=$(wslpath "$WIN_LOCALAPPDATA_WIN" 2>/dev/null || echo "")
        if [ -n "$WIN_LOCALAPPDATA" ] && [ -d "$WIN_LOCALAPPDATA" ]; then
          echo "WIN_LOCALAPPDATA=$WIN_LOCALAPPDATA" >> "$ENV_FILE"
          echo "✓ Windows LocalAppData: $WIN_LOCALAPPDATA" >&2
        else
          echo "WIN_LOCALAPPDATA=$WIN_USERPROFILE/AppData/Local" >> "$ENV_FILE"
          echo "⚠ Using fallback LocalAppData path" >&2
        fi
      else
        echo "WIN_LOCALAPPDATA=$WIN_USERPROFILE/AppData/Local" >> "$ENV_FILE"
        echo "⚠ Using fallback LocalAppData path" >&2
      fi
    else
      echo "WIN_LOCALAPPDATA=$WIN_USERPROFILE/AppData/Local" >> "$ENV_FILE"
      echo "⚠ Using fallback LocalAppData path" >&2
    fi
    
    # detect Windows drive mount point
    WIN_DRIVE_MOUNT="/mnt/c"
    if [ -d "/mnt/c" ]; then
      echo "WIN_DRIVE_MOUNT=/mnt/c" >> "$ENV_FILE"
      echo "✓ Windows C: drive mounted at /mnt/c" >&2
    elif [ -d "/c" ]; then
      WIN_DRIVE_MOUNT="/c"
      echo "WIN_DRIVE_MOUNT=/c" >> "$ENV_FILE"
      echo "✓ Windows C: drive mounted at /c" >&2
    else
      echo "WIN_DRIVE_MOUNT=/mnt/c" >> "$ENV_FILE"
      echo "⚠ Windows C: drive not found, using default /mnt/c" >&2
    fi
    
    # detect Windows system paths
    WIN_WINDOWS="$WIN_DRIVE_MOUNT/Windows"
    WIN_PROGRAM_FILES="$WIN_DRIVE_MOUNT/Program Files"
    WIN_PROGRAM_FILES_X86="$WIN_DRIVE_MOUNT/Program Files (x86)"
    
    echo "WIN_WINDOWS=$WIN_WINDOWS" >> "$ENV_FILE"
    echo "WIN_PROGRAM_FILES=$WIN_PROGRAM_FILES" >> "$ENV_FILE"
    echo "WIN_PROGRAM_FILES_X86=$WIN_PROGRAM_FILES_X86" >> "$ENV_FILE"
    
    # detect additional user directories
    WIN_DOCUMENTS="$WIN_USERPROFILE/Documents"
    WIN_DESKTOP="$WIN_USERPROFILE/Desktop"
    WIN_DOWNLOADS="$WIN_USERPROFILE/Downloads"
    
    echo "WIN_DOCUMENTS=$WIN_DOCUMENTS" >> "$ENV_FILE"
    echo "WIN_DESKTOP=$WIN_DESKTOP" >> "$ENV_FILE"
    echo "WIN_DOWNLOADS=$WIN_DOWNLOADS" >> "$ENV_FILE"
    
    # set permissions
    chmod 644 "$ENV_FILE"
    
    echo "✓ Windows environment detection completed" >&2
    echo "Environment file: $ENV_FILE" >&2
  '';
  
  # Script to load Windows environment variables
  loadWindowsEnvScript = pkgs.writeShellScript "load-windows-environment" ''
    # Load Windows environment variables
    ENV_FILE="$HOME/.config/nix-windows-env"
    
    if [ -f "$ENV_FILE" ]; then
      # source the environment file
      set -a  # automatically export all variables
      source "$ENV_FILE"
      set +a
      
      # export for current shell session
      export WSL_DETECTED WIN_USERNAME WIN_USERPROFILE WIN_APPDATA WIN_LOCALAPPDATA
      export WIN_DRIVE_MOUNT WIN_WINDOWS WIN_PROGRAM_FILES WIN_PROGRAM_FILES_X86
      export WIN_DOCUMENTS WIN_DESKTOP WIN_DOWNLOADS
    else
      echo "⚠ Windows environment file not found: $ENV_FILE" >&2
      echo "Run 'detect-windows-environment' to generate it" >&2
    fi
  '';
  
  # Validation script for Windows environment
  validateWindowsEnvScript = pkgs.writeShellScript "validate-windows-environment" ''
    echo "=== Windows Environment Validation ==="
    
    ENV_FILE="$HOME/.config/nix-windows-env"
    
    if [ ! -f "$ENV_FILE" ]; then
      echo "✗ Windows environment file not found: $ENV_FILE"
      echo "Run 'detect-windows-environment' to generate it"
      exit 1
    fi
    
    echo "✓ Environment file exists: $ENV_FILE"
    echo ""
    
    # load environment variables
    source "$ENV_FILE"
    
    echo "=== Detected Environment ==="
    echo "WSL Detected: $WSL_DETECTED"
    echo "Windows Username: $WIN_USERNAME"
    echo "Windows User Profile: $WIN_USERPROFILE"
    echo "Windows AppData: $WIN_APPDATA"
    echo "Windows LocalAppData: $WIN_LOCALAPPDATA"
    echo "Windows Drive Mount: $WIN_DRIVE_MOUNT"
    echo ""
    
    echo "=== Path Validation ==="
    
    # validate paths exist
    paths_to_check=(
      "$WIN_USERPROFILE:Windows User Profile"
      "$WIN_APPDATA:Windows AppData"
      "$WIN_LOCALAPPDATA:Windows LocalAppData"
      "$WIN_DRIVE_MOUNT:Windows Drive Mount"
      "$WIN_DOCUMENTS:Windows Documents"
    )
    
    for path_info in "''${paths_to_check[@]}"; do
      path="''${path_info%%:*}"
      name="''${path_info##*:}"
      
      if [ -d "$path" ]; then
        echo "✓ $name: $path"
      else
        echo "✗ $name: $path (not found)"
      fi
    done
    
    echo ""
    echo "=== Windows Applications ==="
    
    # check for common Windows applications
    apps_to_check=(
      "$WIN_LOCALAPPDATA/Packages/Microsoft.WindowsTerminal_8wekyb3d8bbwe:Windows Terminal"
      "$WIN_APPDATA/Code:VS Code"
      "$WIN_PROGRAM_FILES/Git:Git for Windows"
      "$WIN_LOCALAPPDATA/Microsoft/Windows/Fonts:User Fonts"
    )
    
    for app_info in "''${apps_to_check[@]}"; do
      app_path="''${app_info%%:*}"
      app_name="''${app_info##*:}"
      
      if [ -d "$app_path" ]; then
        echo "✓ $app_name: $app_path"
      else
        echo "✗ $app_name: $app_path (not installed)"
      fi
    done
  '';

in

{
  config = lib.mkIf cfg.enable {
    # Windows environment detection and validation tools
    home.packages = [
      # Windows environment detection
      (pkgs.writeShellScriptBin "detect-windows-environment" ''
        ${windowsEnvDetectionScript}
      '')
      
      # Load Windows environment variables
      (pkgs.writeShellScriptBin "load-windows-environment" ''
        ${loadWindowsEnvScript}
      '')
      
      # Validate Windows environment
      (pkgs.writeShellScriptBin "validate-windows-environment" ''
        ${validateWindowsEnvScript}
      '')
    ];

    # Automatic Windows environment detection on activation
    home.activation.detectWindowsEnvironment = lib.hm.dag.entryAfter ["writeBoundary"] ''
      echo "Detecting Windows environment..."
      $DRY_RUN_CMD ${windowsEnvDetectionScript}
    '';

    # Shell integration for automatic environment loading
    programs.bash.initExtra = lib.mkAfter ''
      # Load Windows environment variables if available
      if [ -f "$HOME/.config/nix-windows-env" ]; then
        set -a
        source "$HOME/.config/nix-windows-env"
        set +a
      fi
    '';

    programs.fish.interactiveShellInit = lib.mkAfter ''
      # Load Windows environment variables if available
      if test -f "$HOME/.config/nix-windows-env"
        source "$HOME/.config/nix-windows-env"
      end
    '';
  };
}
